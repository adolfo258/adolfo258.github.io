{"version":3,"sources":["firebase.js","components/ProductForm.js","components/Product.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Form","styled","form","Button","button","ProcutForm","addOrEdit","currentId","products","useState","price","name","description","time","values","setValues","handleInputChange","e","target","value","Date","handleSubmit","a","preventDefault","useEffect","collection","doc","get","then","data","alert","onSubmit","className","placeholder","type","required","onChange","ProductCard","div","Product","setProducts","setCurrentId","orderBy","onSnapshot","query","docs","forEach","push","id","console","log","productObject","update","set","map","link","key","toUpperCase","onClick","window","confirm","delete","GlobalStyle","createGlobalStyle","ContainerForm","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e27700c.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyAVP5din4DivnpQx0-Qs1xYyjqxj2gz8AU\",\r\n    authDomain: \"crud-react-ef7db.firebaseapp.com\",\r\n    databaseURL: \"https://crud-react-ef7db.firebaseio.com\",\r\n    projectId: \"crud-react-ef7db\",\r\n    storageBucket: \"crud-react-ef7db.appspot.com\",\r\n    messagingSenderId: \"1044699494241\",\r\n    appId: \"1:1044699494241:web:61fd15f6807b3f67907720\"\r\n  };\r\n  // Initialize Firebase\r\n  const fb = firebase.initializeApp(firebaseConfig);\r\n\r\n  export const db = fb.firestore()\r\n\r\n  //Guardo firebase initialize en una constante para poder exportarla","import React, {useState, useEffect} from 'react'\r\nimport styled from 'styled-components'\r\nimport {db} from '../firebase'\r\n\r\n\r\nconst Form = styled.form`\r\n    background-color: #34495E;\r\n    width: 100%;\r\n    border-radius: 5px;\r\n    padding:20px;\r\n\r\n    .form__group{\r\n        font-size: 40px;\r\n        display:flex;\r\n        justify-content:space-between;\r\n        padding:10px;\r\n    }\r\n\r\n    .form__icon__container{\r\n        cursor:pointer;\r\n        color:#fff;\r\n        width:20%;\r\n    }\r\n\r\n    .form__input{\r\n        width: 85%;\r\n        padding-left: 5px;\r\n        font-size: 18px;\r\n    }\r\n`\r\n\r\nconst Button = styled.button`\r\n    display:block;\r\n    padding: 10px;\r\n    background-color: #E67E22;\r\n    color: #fff;\r\n    border: none;\r\n    font-size: 18px;\r\n    cursor: pointer;\r\n    width:300px;\r\n    margin: 0 auto;\r\n    \r\n`\r\n\r\nconst ProcutForm = ({addOrEdit, currentId, products}) => {\r\n\r\n    const [values, setValues] = useState({\r\n        price:'',\r\n        name:'',\r\n        description:'',\r\n        time:''\r\n    })\r\n    \r\n    //Toma los valores cada vez que hay un cambio en los inputs y actualiza el estado con ellos.\r\n    const handleInputChange = (e) => {\r\n        const {name, value} = e.target\r\n        setValues({...values, [name]:value, time:new Date(  )})\r\n    }\r\n\r\n    //Al hacer submit ejecuto funcion para agregar valores de los inputs a la base de datos y despues receteo los valores de los input para resetear el formulario.\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n\r\n        await addOrEdit(values)\r\n\r\n        setValues({...values, \r\n            price:'',\r\n            name:'',\r\n            description:''\r\n        })\r\n    }\r\n    //cuando hay un cambio en el currentId se dispara, si hay currentId entonces hace una peticion a firebase con los datos de esa id, sino deja los valores a ''.\r\n    useEffect(() => {\r\n        if(currentId === ''){\r\n            setValues({\r\n                price:'',\r\n                name:'',\r\n                description:'',\r\n                time:''\r\n            })\r\n        }else{\r\n          db.collection('Products').doc(currentId).get().then((doc) => {\r\n            setValues(doc.data())\r\n            alert('Escribe los nuevos valores del producto!')\r\n          })\r\n             \r\n           \r\n        }\r\n    },[currentId])\r\n\r\n    return(\r\n        <>\r\n            <Form onSubmit={handleSubmit}>\r\n                <div className=\"form__group\">\r\n                    <div className=\"form__icon__container\">\r\n                        <i className=\"fab fa-product-hunt\"></i>\r\n                    </div>\r\n                    <input className=\"form__input\" \r\n                    placeholder=\"Nombre del producto\" \r\n                    name=\"name\" \r\n                    type=\"text\"\r\n                    required\r\n                    onChange={handleInputChange}\r\n                    value={values.name}\r\n                    >\r\n                    </input>\r\n                </div>\r\n\r\n                <div className=\"form__group\">\r\n                    <div className=\"form__icon__container\">\r\n                        <i className=\"fas fa-tags\"></i>\r\n                    </div>\r\n                    <input className=\"form__input\" \r\n                    placeholder=\"Precio $\" \r\n                    name=\"price\" \r\n                    type=\"number\"\r\n                    required\r\n                    onChange={handleInputChange}\r\n                    value={values.price}\r\n                    >\r\n                    </input>\r\n                </div>\r\n\r\n                <div className=\"form__group\">\r\n                    <div className=\"form__icon__container\">\r\n                        <i className=\"fas fa-edit\"></i>\r\n                    </div>\r\n                    <input className=\"form__input\" \r\n                    placeholder=\"Escribe una descripcion.\" \r\n                    name=\"description\" \r\n                    type=\"text\"\r\n                    required \r\n                    onChange={handleInputChange}\r\n                    value={values.description}\r\n                    >\r\n                    </input>\r\n                </div>\r\n                <Button type=\"submit\">{currentId ? 'Update' : 'Enviar'}</Button>\r\n            </Form>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProcutForm","import React, {useEffect, useState} from 'react'\r\nimport ProcutForm from './ProductForm'\r\nimport {db} from '../firebase'\r\nimport styled from 'styled-components'\r\n\r\nconst ProductCard = styled.div`\r\n    width: 100%;\r\n    background-color: #34495E;\r\n    border-radius: 5px;\r\n    color:#fff;\r\n    padding: 10px 20px;\r\n    margin: 10px 0;\r\n\r\n\r\n      .card{\r\n         margin: 20px auto;\r\n         border: 2px solid #85929E;\r\n         padding: 20px;\r\n         border-radius: 5px;\r\n         height: 150px;\r\n         width:  100%;\r\n         font-size: 18px;\r\n         display:flex;\r\n         justify-content:space-between; \r\n     }\r\n\r\n     .card__info{\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content:space-around;\r\n     }\r\n\r\n     .card__icons i{\r\n         cursor:pointer;\r\n         margin:10px;\r\n     }\r\n\r\n`\r\n\r\nconst Product = () => {\r\n\r\n    const [products, setProducts] = useState([])\r\n    const [currentId, setCurrentId] = useState('')\r\n\r\n    //Agrega a la base de datos el objeto que le paso.\r\n    const addOrEdit =  (productObject) => {\r\n        if(!currentId){\r\n            db.collection('Products').doc().set(productObject)\r\n        } else {\r\n            db.collection('Products').doc(currentId).update(productObject).then(() => {\r\n                setCurrentId('')\r\n                alert('Editado Correctamente!')\r\n            })\r\n        }\r\n    }   \r\n    //Le pido a firebase los docs en mi base de datos, los guardo en un array y luego actualizo el estado con ese array.\r\n    const getProducts = () => {\r\n        db.collection('Products').orderBy('time', 'desc').onSnapshot((query) => {\r\n            const docs = []\r\n\r\n            query.forEach((doc)=>{\r\n                docs.push({...doc.data(), id: doc.id})\r\n            })\r\n            console.log(docs)\r\n            setProducts(docs)\r\n        })  \r\n    }\r\n    //Borra la card con el id que le pase.\r\n    const deleteCard = (id) => {\r\n        if(window.confirm('¿Estas seguro de borrar este producto?')){\r\n            db.collection('Products').doc(id).delete()\r\n        }\r\n    }\r\n    //actualiza el estado de currentId\r\n    const getIdCard = (id) => {\r\n        setCurrentId(id)\r\n    }\r\n    \r\n    //Cada vez que hay un cambio o se renderiza algo nuevo se ejecuta.\r\n    useEffect(() => {\r\n        getProducts()\r\n    },[])\r\n\r\n    //Por cada link en el estado renderizo una card con sus valores.\r\n   return(\r\n    <>\r\n        <ProcutForm addOrEdit={addOrEdit} currentId={currentId} products={products}/>\r\n        <ProductCard>\r\n            {products.map((link) => {\r\n                return(\r\n                    <div className=\"card\" key={link.id}>\r\n                    <div className=\"card__info\">\r\n                        <h2>{link.name.toUpperCase()}</h2>\r\n                        <p>$ {link.price}</p>\r\n                        <p>{link.description}</p>\r\n                    </div>\r\n                    <div className=\"card__icons\">\r\n                        <i className=\"fas fa-trash-alt\" onClick={() =>deleteCard(link.id)}></i>\r\n                        <i className=\"fas fa-edit\" onClick={() => getIdCard(link.id)}></i>\r\n                    </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </ProductCard>\r\n    </>\r\n    ) \r\n}\r\n\r\nexport default Product","import React from 'react';\nimport Product from './components/Product'\nimport styled from 'styled-components'\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing:border-box;\n  }\n\n  body{\n    display:flex;\n  }\n`\n\nconst ContainerForm = styled.div`\n  margin: 20px;\n`\n\nfunction App() {\n  return (\n    <>\n    <GlobalStyle />\n    <ContainerForm>\n      <Product />\n    </ContainerForm>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './firebase'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}